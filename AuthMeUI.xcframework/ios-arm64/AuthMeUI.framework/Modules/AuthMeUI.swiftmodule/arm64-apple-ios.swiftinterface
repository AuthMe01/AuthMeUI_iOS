// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name AuthMeUI
import AVFoundation
import AudioToolbox
import AuthMe
@_exported import AuthMeUI
import CoreGraphics/*.CGFloat*/
import Foundation
import ImageIO
import Swift
import UIKit
import WebKit
import _Concurrency
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class AntiFakeOCRIntroViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public init(needConfirm: Swift.Bool)
  @_Concurrency.MainActor(unsafe) weak public var delegate: AuthMeUI.AuthMeAuthenticationDelegate?
  @_Concurrency.MainActor(unsafe) public var displayResultPage: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var resultEditable: Swift.Bool
  @_Concurrency.MainActor(unsafe) public func closeAll()
  @_Concurrency.MainActor(unsafe) public func backToIntro()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class BaseViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol AuthMeAuthenticationDelegate : ObjectiveC.NSObjectProtocol {
  func authmeLivenessViewController(_ viewController: AuthMeUI.AuthMeLivenessViewController, didRecognize result: AuthMeUI.AuthMeLivenessViewController.LivenessResult)
  func authmeLivenessViewController(_ viewController: AuthMeUI.AuthMeLivenessViewController, didFinishVerifyWith result: AuthMeUI.AuthMeLivenessViewController.LivenessResult, isVerifyPass: Swift.Bool)
  func authTWIDFraudResult(frontImage: UIKit.UIImage?, backImage: UIKit.UIImage?, result: TWIDResult?, error: Swift.Error?)
  func authTWIDResult(frontImage: UIKit.UIImage?, backImage: UIKit.UIImage?, result: TWIDResult?, error: Swift.Error?)
  func authTWLicenseResult(frontImage: UIKit.UIImage?, backImage: UIKit.UIImage?, result: TWLicenseResult?, error: Swift.Error?)
  func authTWHealthResult(image: UIKit.UIImage?, result: TWHealthResult?, error: Swift.Error?)
  func authMRZResult(result: MRZResult?, error: Swift.Error?)
  func personalPrivacyResult(result: Swift.Bool)
}
extension AuthMeUI.AuthMeAuthenticationDelegate {
  public func authmeLivenessViewController(_ viewController: AuthMeUI.AuthMeLivenessViewController, didRecognize result: AuthMeUI.AuthMeLivenessViewController.LivenessResult)
  public func authmeLivenessViewController(_ viewController: AuthMeUI.AuthMeLivenessViewController, didFinishVerifyWith result: AuthMeUI.AuthMeLivenessViewController.LivenessResult, isVerifyPass: Swift.Bool)
  public func authTWIDFraudResult(frontImage: UIKit.UIImage?, backImage: UIKit.UIImage?, result: TWIDResult?, error: Swift.Error?)
  public func authTWIDResult(frontImage _: UIKit.UIImage?, backImage _: UIKit.UIImage?, result _: TWIDResult?, error _: Swift.Error?)
  public func authTWLicenseResult(frontImage _: UIKit.UIImage?, backImage _: UIKit.UIImage?, result _: TWLicenseResult?, error _: Swift.Error?)
  public func authTWHealthResult(image _: UIKit.UIImage?, result _: TWHealthResult?, error _: Swift.Error?)
  public func authMRZResult(result _: MRZResult?, error _: Swift.Error?)
  public func personalPrivacyResult(result _: Swift.Bool)
}
public protocol AuthMePlaygroundDelegate : ObjectiveC.NSObjectProtocol {
  func authmeLivenessViewControllerDidRecognize(result: AuthMeUI.AuthMeLivenessViewController.LivenessResult)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class AuthMeLivenessViewController : AuthMeUI.BaseViewController, AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate {
  @_Concurrency.MainActor(unsafe) weak public var delegate: AuthMeUI.AuthMeAuthenticationDelegate?
  @_Concurrency.MainActor(unsafe) public var uiParams: AuthMeUI.AuthMeLivenessUIParams?
  @_Concurrency.MainActor(unsafe) final public let action: Action
  @_Concurrency.MainActor(unsafe) public init(action: Action = .register(waitResult: true), type: AuthMeUI.AuthMeLivenessViewController.`Type`)
  @_Concurrency.MainActor(unsafe) public func checkModel(progressHandler: ((Swift.Double) -> Swift.Void)? = nil, handler: ((Swift.Result<Swift.Void, FlowError>) -> Swift.Void)?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc public func captureOutput(_: AVFoundation.AVCaptureOutput, didOutput sampleBuffer: CoreMedia.CMSampleBuffer, from _: AVFoundation.AVCaptureConnection)
  @objc deinit
}
extension AuthMeUI.AuthMeLivenessViewController {
  public enum `Type` {
    case passive
    case active
    public static func == (a: AuthMeUI.AuthMeLivenessViewController.`Type`, b: AuthMeUI.AuthMeLivenessViewController.`Type`) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension AuthMeUI.AuthMeLivenessViewController : LivenessFlowDelegate {
  @_Concurrency.MainActor(unsafe) public func livenessDidNotifyMessage(message: Swift.String)
  @_Concurrency.MainActor(unsafe) public func livenessDidUpdateReconize(result: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func livenessDidFailureWith(error: FlowError, retryHandler: @escaping (() -> Swift.Void))
  @_Concurrency.MainActor(unsafe) public func livenessDidRecognize(image: UIKit.UIImage)
}
extension AuthMeUI.AuthMeLivenessViewController {
  public enum LivenessResult {
    case succeed(UIKit.UIImage)
    case failed
    case canceled
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class AuthMeManager : ObjectiveC.NSObject {
  @objc deinit
  public static let shared: AuthMeUI.AuthMeManager
  public static var version: Swift.String {
    get
  }
  public var UIConfig: AuthMeUI.AuthMeUIConfig
  public func setLocalizedBundle(with bundle: Foundation.Bundle)
  public func setLocalize(localize: AuthMeUI.AuthMeLocalize)
  public var localize: AuthMeUI.AuthMeLocalize {
    get
    set
  }
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class AuthMeOCRViewController : AuthMeUI.BaseViewController {
  @_Concurrency.MainActor(unsafe) public var cardType: OCRCardType
  @_Concurrency.MainActor(unsafe) public var watermark: UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public var uiParams: AuthMeUI.AuthMeOCRUIParams?
  @_Concurrency.MainActor(unsafe) weak public var delegate: AuthMeUI.AuthMeAuthenticationDelegate?
  @_Concurrency.MainActor(unsafe) public var displayResultPage: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var resultEditable: Swift.Bool
  @_Concurrency.MainActor(unsafe) public init(cardType: OCRCardType, needConfirm: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func checkModel(progressHandler: ((Swift.Double) -> Swift.Void)? = nil, handler: ((Swift.Result<Swift.Void, OCRError>) -> Swift.Void)?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @objc deinit
}
extension AuthMeUI.AuthMeOCRViewController : AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func captureOutput(_: AVFoundation.AVCaptureOutput, didOutput sampleBuffer: CoreMedia.CMSampleBuffer, from _: AVFoundation.AVCaptureConnection)
}
extension AuthMeUI.AuthMeOCRViewController : OCRFlowDelegate {
  @_Concurrency.MainActor(unsafe) public func didFailureWith(error: OCRError, retryHandler: @escaping (() -> Swift.Void))
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class LivenessPlaygroundViewController : AuthMeUI.BaseViewController, AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate {
  @_Concurrency.MainActor(unsafe) weak public var delegate: AuthMeUI.AuthMePlaygroundDelegate?
  @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) public func checkModel(progressHandler: ((Swift.Double) -> Swift.Void)? = nil, handler: ((Swift.Result<Swift.Void, FlowError>) -> Swift.Void)?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc public func captureOutput(_: AVFoundation.AVCaptureOutput, didOutput sampleBuffer: CoreMedia.CMSampleBuffer, from _: AVFoundation.AVCaptureConnection)
  @objc deinit
}
extension AuthMeUI.LivenessPlaygroundViewController : LivenessPlaygroundFlowDelegate {
  @_Concurrency.MainActor(unsafe) public func livenessDidNotifyMessage(message: Swift.String)
  @_Concurrency.MainActor(unsafe) public func livenessDidUpdateReconize(result: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func livenessDidFailureWith(error: FlowError, retryHandler: @escaping (() -> Swift.Void))
  @_Concurrency.MainActor(unsafe) public func livenessDidRecognize(image: UIKit.UIImage)
  @_Concurrency.MainActor(unsafe) public func livenessQueueDidUpload(currentCount: Swift.Int)
}
extension AuthMeUI.LivenessPlaygroundViewController {
  public enum LivenessResult {
    case succeed(UIKit.UIImage)
    case failed
    case canceled
  }
}
public enum AuthMeLocalize : Swift.String {
  case en
  case zh_Hant
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers final public class AuthMeOCRUIParams {
  public static func setWith(block: (AuthMeUI.AuthMeOCRUIParams) -> Swift.Void) -> AuthMeUI.AuthMeOCRUIParams
  @objc deinit
}
extension AuthMeUI.AuthMeOCRUIParams {
  @discardableResult
  final public func isColseButtonHidden(_ isHidden: Swift.Bool) -> Self
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class PersonalPrivacyViewController : UIKit.UIViewController {
  @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) public var url: Foundation.URL?
  @_Concurrency.MainActor(unsafe) weak public var delegate: AuthMeUI.AuthMeAuthenticationDelegate?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @objc deinit
}
public struct AuthMeUIConfig {
  public struct Customized {
    public struct ActionButton {
      public let backgroundColor: UIKit.UIColor
      public let contentColor: UIKit.UIColor
      public init(backgroundColor: UIKit.UIColor, contentColor: UIKit.UIColor)
    }
    public struct ActionHint {
      public let backgroundColor: UIKit.UIColor
      public let contentColor: UIKit.UIColor
      public init(backgroundColor: UIKit.UIColor, contentColor: UIKit.UIColor)
    }
    public struct CloseHint {
      public let backgroundColor: UIKit.UIColor
      public let contentColor: UIKit.UIColor
      public init(backgroundColor: UIKit.UIColor, contentColor: UIKit.UIColor)
    }
    public struct BackHint {
      public let contentColor: UIKit.UIColor
      public init(contentColor: UIKit.UIColor)
    }
    public struct Scanner {
      public let contentColor: UIKit.UIColor
      public init(contentColor: UIKit.UIColor)
    }
    public struct Frame {
      public let defaultColor: UIKit.UIColor
      public let highlightColor: UIKit.UIColor
      public init(defaultColor: UIKit.UIColor, highlightColor: UIKit.UIColor)
    }
    public struct StepButton {
      public let backgroundColor: UIKit.UIColor
      public let contentColor: UIKit.UIColor
      public init(backgroundColor: UIKit.UIColor, contentColor: UIKit.UIColor)
    }
    public let actionButton: AuthMeUI.AuthMeUIConfig.Customized.ActionButton
    public let actionHint: AuthMeUI.AuthMeUIConfig.Customized.ActionHint
    public let closeHint: AuthMeUI.AuthMeUIConfig.Customized.CloseHint
    public let backHint: AuthMeUI.AuthMeUIConfig.Customized.BackHint
    public let scanner: AuthMeUI.AuthMeUIConfig.Customized.Scanner
    public let frame: AuthMeUI.AuthMeUIConfig.Customized.Frame
    public let stepButton: AuthMeUI.AuthMeUIConfig.Customized.StepButton
    public init(actionButton: AuthMeUI.AuthMeUIConfig.Customized.ActionButton, actionHint: AuthMeUI.AuthMeUIConfig.Customized.ActionHint, closeHint: AuthMeUI.AuthMeUIConfig.Customized.CloseHint, backHint: AuthMeUI.AuthMeUIConfig.Customized.BackHint, scanner: AuthMeUI.AuthMeUIConfig.Customized.Scanner, frame: AuthMeUI.AuthMeUIConfig.Customized.Frame, stepButton: AuthMeUI.AuthMeUIConfig.Customized.StepButton)
  }
  public var customized: AuthMeUI.AuthMeUIConfig.Customized
  public var showStatement: Swift.Bool
  public init(customized: AuthMeUI.AuthMeUIConfig.Customized, showStatement: Swift.Bool)
}
@_hasMissingDesignatedInitializers final public class AuthMeLivenessUIParams {
  public static func setWith(block: (AuthMeUI.AuthMeLivenessUIParams) -> Swift.Void) -> AuthMeUI.AuthMeLivenessUIParams
  @objc deinit
}
extension AuthMeUI.AuthMeLivenessUIParams {
  @discardableResult
  final public func isColseButtonHidden(_ isHidden: Swift.Bool) -> Self
}
extension AuthMeUI.AuthMeLivenessViewController.`Type` : Swift.Equatable {}
extension AuthMeUI.AuthMeLivenessViewController.`Type` : Swift.Hashable {}
extension AuthMeUI.AuthMeLocalize : Swift.Equatable {}
extension AuthMeUI.AuthMeLocalize : Swift.Hashable {}
extension AuthMeUI.AuthMeLocalize : Swift.RawRepresentable {}
