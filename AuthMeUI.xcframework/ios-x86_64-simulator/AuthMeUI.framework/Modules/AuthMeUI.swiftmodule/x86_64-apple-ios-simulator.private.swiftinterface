// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name AuthMeUI
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AudioToolbox
import AuthMe
@_exported import AuthMeUI
import AuthmeNFCKit
import CoreGraphics/*.CGFloat*/
import CoreMotion
import CoreNFC
import CryptoKit
import DeveloperToolsSupport
import Foundation
import ImageIO
import QuartzCore
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public class AuthMeAccessToken {
  public init(tokenURL: Foundation.URL, client: Swift.String, secret: Swift.String, customerID: Swift.String)
  public struct Response : Swift.Decodable {
    public init(from decoder: any Swift.Decoder) throws
  }
  public enum Error : Swift.Error {
    case invalidStatusCode(Swift.Int?, Foundation.Data?)
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class BaseViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol AuthMeAuthenticationDelegate : ObjectiveC.NSObjectProtocol {
  func authmeLivenessViewController(_ viewController: AuthMeUI.AuthMeLivenessViewController, didRecognize result: AuthMeUI.AuthMeLivenessViewController.LivenessResult)
  func authmeLivenessViewController(didRecognize result: AuthMeUI.AuthMeLivenessViewController.LivenessResult)
  func authmeLivenessViewController(_ viewController: AuthMeUI.AuthMeLivenessViewController, didFinishVerifyWith result: AuthMeUI.AuthMeLivenessViewController.LivenessResult, isVerifyPass: Swift.Bool)
  func authTWIDFraudResult(frontImage: UIKit.UIImage?, backImage: UIKit.UIImage?, result: TWIDResult?, error: (any Swift.Error)?)
  func authTWIDResult(frontImage: UIKit.UIImage?, backImage: UIKit.UIImage?, result: TWIDResult?, error: (any Swift.Error)?)
  func authTWLicenseResult(frontImage: UIKit.UIImage?, backImage: UIKit.UIImage?, result: TWLicenseResult?, error: (any Swift.Error)?)
  func authTWHealthResult(image: UIKit.UIImage?, result: TWHealthResult?, error: (any Swift.Error)?)
  func authMRZResult(result: MRZResult?, error: (any Swift.Error)?)
  func authTWNResident(frontImage: UIKit.UIImage?, backImage: UIKit.UIImage?, result: TWNResidentResult?, error: (any Swift.Error)?)
  func authJPNIDCard(frontImage: UIKit.UIImage?, backImage: UIKit.UIImage?, result: JPNIDCardResult?, error: (any Swift.Error)?)
  func authJPNIDCardNFC(_ result: JPNIDCardNFCResult?, error: (any Swift.Error)?)
  func authJPNDriverLicense(image: UIKit.UIImage?, result: JPNDriverLicenseResult?, error: (any Swift.Error)?)
  func authJPNResidentCard(image: UIKit.UIImage?, result: JPNResidentCardResult?, error: (any Swift.Error)?)
  func authUSAIDCard(image: UIKit.UIImage?, result: USAIDCardResult?, error: (any Swift.Error)?)
  func authUSADriverLicense(image: UIKit.UIImage?, result: USADriverLicenseResult?, error: (any Swift.Error)?)
  func authUSAVisitorVISA(image: UIKit.UIImage?, result: USAVisitorVISAResult?, error: (any Swift.Error)?)
  func authIDNIDCard(image: UIKit.UIImage?, result: IDNIDCardResult?, error: (any Swift.Error)?)
  func authIDNDriverLicense(image: UIKit.UIImage?, result: IDNDriverLicenseResult?, error: (any Swift.Error)?)
  func authMRZResultAndPlaceOfBirthConfirmed(result: MRZResult?, confirmed: Swift.Bool, error: (any Swift.Error)?)
  func personalPrivacyResult(result: Swift.Bool)
  func authenticateCompleted()
}
extension AuthMeUI.AuthMeAuthenticationDelegate {
  public func authmeLivenessViewController(_ viewController: AuthMeUI.AuthMeLivenessViewController, didRecognize result: AuthMeUI.AuthMeLivenessViewController.LivenessResult)
  public func authmeLivenessViewController(didRecognize result: AuthMeUI.AuthMeLivenessViewController.LivenessResult)
  public func authmeLivenessViewController(_ viewController: AuthMeUI.AuthMeLivenessViewController, didFinishVerifyWith result: AuthMeUI.AuthMeLivenessViewController.LivenessResult, isVerifyPass: Swift.Bool)
  public func authTWIDFraudResult(frontImage: UIKit.UIImage?, backImage: UIKit.UIImage?, result: TWIDResult?, error: (any Swift.Error)?)
  public func authTWIDResult(frontImage _: UIKit.UIImage?, backImage _: UIKit.UIImage?, result _: TWIDResult?, error _: (any Swift.Error)?)
  public func authTWLicenseResult(frontImage _: UIKit.UIImage?, backImage _: UIKit.UIImage?, result _: TWLicenseResult?, error _: (any Swift.Error)?)
  public func authTWHealthResult(image _: UIKit.UIImage?, result _: TWHealthResult?, error _: (any Swift.Error)?)
  public func authMRZResult(result _: MRZResult?, error _: (any Swift.Error)?)
  public func authTWNResident(frontImage: UIKit.UIImage?, backImage: UIKit.UIImage?, result: TWNResidentResult?, error: (any Swift.Error)?)
  public func authJPNIDCard(frontImage: UIKit.UIImage?, backImage: UIKit.UIImage?, result: JPNIDCardResult?, error: (any Swift.Error)?)
  public func authJPNIDCardNFC(_ result: JPNIDCardNFCResult?, error: (any Swift.Error)?)
  public func authJPNDriverLicense(image: UIKit.UIImage?, result: JPNDriverLicenseResult?, error: (any Swift.Error)?)
  public func authJPNResidentCard(image: UIKit.UIImage?, result: JPNResidentCardResult?, error: (any Swift.Error)?)
  public func authUSAIDCard(image: UIKit.UIImage?, result: USAIDCardResult?, error: (any Swift.Error)?)
  public func authUSADriverLicense(image: UIKit.UIImage?, result: USADriverLicenseResult?, error: (any Swift.Error)?)
  public func authUSAVisitorVISA(image: UIKit.UIImage?, result: USAVisitorVISAResult?, error: (any Swift.Error)?)
  public func authIDNIDCard(image: UIKit.UIImage?, result: IDNIDCardResult?, error: (any Swift.Error)?)
  public func authIDNDriverLicense(image: UIKit.UIImage?, result: IDNDriverLicenseResult?, error: (any Swift.Error)?)
  public func authMRZResultAndPlaceOfBirthConfirmed(result: MRZResult?, comfirmed: Swift.Bool, error: (any Swift.Error)?)
  public func personalPrivacyResult(result _: Swift.Bool)
  public func authenticateCompleted()
}
public protocol AuthMePlaygroundDelegate : ObjectiveC.NSObjectProtocol {
  func authmeLivenessViewControllerDidRecognize(result: AuthMeUI.AuthMeLivenessViewController.LivenessResult)
}
public protocol AuthMeNFCDelegate : ObjectiveC.NSObjectProtocol {
  func authmeNFCDidRecognize(result: MRZResult?, error: (any Swift.Error)?)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class AuthMeManager : ObjectiveC.NSObject {
  @objc deinit
  public static let shared: AuthMeUI.AuthMeManager
  public static var version: Swift.String {
    get
  }
  public var UIConfig: AuthMeUI.AuthMeUIConfig
  public var KYCConfig: AuthMeUI.AuthmeKYCConfig
  public func setLocalizedBundle(with bundle: Foundation.Bundle)
  public func setLocalize(localize: AuthMeUI.AuthMeLocalize)
  public var localize: AuthMeUI.AuthMeLocalize {
    get
    set
  }
}
public enum AuthMeLocalize : Swift.String {
  case en
  case zh_Hant
  case jp
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum AuthmeFeature : Swift.String {
  case IDCardFraud
  case IDCard
  case Passport
  case NFCPassport
  case DriverLicense
  case HealthCard
  case ResidentCard
  case JPID
  case JPNFCID
  case JPDriverLicense
  case JPResidentCard
  case USID
  case USDriverLicense
  case USVisitorVISA
  case IDID
  case IDDriverLicense
  case Liveness
  case PassportWithVIZ
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol AuthMeUICoordinatorDelegate : AnyObject {
  func coordinatorDidFinishScanWithErrorSetting()
  func coordinatorDidFinishScan()
}
final public class AuthMeUICoordinator<T> where T : FrameworkMode {
  weak final public var authDelegate: (any AuthMeUI.AuthMeAuthenticationDelegate)?
  weak final public var delegate: (any AuthMeUI.AuthMeUICoordinatorDelegate)?
  public init(presenter: UIKit.UIViewController, flows: [[any EKYCType]])
  @objc deinit
}
extension AuthMeUI.AuthMeLivenessViewController : AVFoundation.AVCaptureDataOutputSynchronizerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func dataOutputSynchronizer(_ synchronizer: AVFoundation.AVCaptureDataOutputSynchronizer, didOutput synchronizedDataCollection: AVFoundation.AVCaptureSynchronizedDataCollection)
}
extension AuthMeUI.AuthMeLivenessViewController {
  public enum `Type` {
    case passive
    case active
    public static func == (a: AuthMeUI.AuthMeLivenessViewController.`Type`, b: AuthMeUI.AuthMeLivenessViewController.`Type`) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum LivenessResult {
    case succeed(UIKit.UIImage)
    case failed
    case canceled
  }
}
extension AuthMeUI.AuthMeLivenessViewController : LivenessFlowDelegate {
  @_Concurrency.MainActor(unsafe) public func livenessDidStart()
  @_Concurrency.MainActor(unsafe) public func livenessDidNotifyMessage(status: LivenessDetectStatus)
  @_Concurrency.MainActor(unsafe) public func livenessDidUpdateReconize(result: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func livenessDidFailureWith(error: FlowError, retryHandler: @escaping (() -> Swift.Void))
  @_Concurrency.MainActor(unsafe) public func livenessDidRecognize(image: UIKit.UIImage)
  @_Concurrency.MainActor(unsafe) public func livenessDidFaceScale(direction: LivenessFlow.FaceScaleDirection.Direction)
  @_Concurrency.MainActor(unsafe) public func livenessNotifyStage(log: LogFAS)
  @_Concurrency.MainActor(unsafe) public func livenessNotifyUpload(log: LogUpload)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class AuthMeLivenessViewController : AuthMeUI.BaseViewController {
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any AuthMeUI.AuthMeAuthenticationDelegate)?
  @_Concurrency.MainActor(unsafe) public var uiParams: AuthMeUI.AuthMeLivenessUIParams?
  @_Concurrency.MainActor(unsafe) public var isInfoPageEnabled: Swift.Bool
  @_Concurrency.MainActor(unsafe) final public let action: Action
  @_Concurrency.MainActor(unsafe) public var eventTrackingEnable: Swift.Bool
  @_Concurrency.MainActor(unsafe) public init(action: Action = .register(waitResult: true))
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLayoutSubviews()
  @objc deinit
}
public protocol AuthmeMenuCellable : UIKit.UIView {
  var titleLabel: UIKit.UILabel { get set }
  var isSelected: Swift.Bool { get set }
}
@_hasMissingDesignatedInitializers final public class AuthMeOCRUIParams {
  public static func setWith(block: (AuthMeUI.AuthMeOCRUIParams) -> Swift.Void) -> AuthMeUI.AuthMeOCRUIParams
  @objc deinit
}
extension AuthMeUI.AuthMeOCRUIParams {
  @discardableResult
  final public func isColseButtonHidden(_ isHidden: Swift.Bool) -> Self
}
@_hasMissingDesignatedInitializers final public class AuthmeFeatureConfig {
  public static func setWith(_ block: (AuthMeUI.AuthmeFeatureConfig) -> Swift.Void) -> AuthMeUI.AuthmeFeatureConfig
  @objc deinit
}
extension AuthMeUI.AuthmeFeatureConfig {
  @discardableResult
  final public func needConfirm(_ needConfirm: Swift.Bool) -> Self
  @discardableResult
  final public func waterMark(_ waterMark: UIKit.UIImage) -> Self
  @discardableResult
  final public func isResultPageDisplayable(_ isResultPageDisplayable: Swift.Bool) -> Self
  @discardableResult
  final public func isResultEditable(_ isResultEditable: Swift.Bool) -> Self
  @discardableResult
  final public func isEventTrackingEnable(_ isEventTrackingEnable: Swift.Bool) -> Self
  @discardableResult
  final public func isFraudIntroEnable(_ isFraudIntroEnable: Swift.Bool) -> Self
  @discardableResult
  final public func isFraudHintAnimationEnable(_ isFraudHintAnimationEnable: Swift.Bool) -> Self
  @discardableResult
  final public func isNFCOffline(_ isNFCOffline: Swift.Bool) -> Self
  @discardableResult
  final public func isAutoDetectThicknessEnable(_ isAutoDetectThicknessEnable: Swift.Bool) -> Self
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class LivenessPlaygroundViewController : AuthMeUI.BaseViewController, AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate {
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any AuthMeUI.AuthMePlaygroundDelegate)?
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) public func checkModel(progressHandler: ((Swift.Double) -> Swift.Void)? = nil, handler: ((Swift.Result<Swift.Void, FlowError>) -> Swift.Void)?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLayoutSubviews()
  @objc deinit
}
extension AuthMeUI.LivenessPlaygroundViewController : AVFoundation.AVCaptureDataOutputSynchronizerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func dataOutputSynchronizer(_ synchronizer: AVFoundation.AVCaptureDataOutputSynchronizer, didOutput synchronizedDataCollection: AVFoundation.AVCaptureSynchronizedDataCollection)
}
extension AuthMeUI.LivenessPlaygroundViewController : LivenessPlaygroundFlowDelegate {
  @_Concurrency.MainActor(unsafe) public func livenessDidStart()
  @_Concurrency.MainActor(unsafe) public func livenessDidNotifyMessage(status: LivenessDetectStatus)
  @_Concurrency.MainActor(unsafe) public func livenessDidUpdateReconize(result: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func livenessDidFailureWith(error: FlowError, retryHandler: @escaping (() -> Swift.Void))
  @_Concurrency.MainActor(unsafe) public func livenessDidRecognize(image: UIKit.UIImage)
  @_Concurrency.MainActor(unsafe) public func livenessQueueDidUpload(currentCount: Swift.Int)
  @_Concurrency.MainActor(unsafe) public func livenessDidFaceScale(direction: LivenessFlow.FaceScaleDirection.Direction)
  @_Concurrency.MainActor(unsafe) public func livenessNotifyStage(log: LogFAS)
  @_Concurrency.MainActor(unsafe) public func livenessNotifyUpload(log: LogUpload)
}
extension AuthMeUI.LivenessPlaygroundViewController {
  public enum LivenessResult {
    case succeed(UIKit.UIImage)
    case failed
    case canceled
  }
}
public enum TransitionStyle {
  case push
  case present
  public static func == (a: AuthMeUI.TransitionStyle, b: AuthMeUI.TransitionStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct FlowControl {
  public var isMenuEnabled: Swift.Bool
  public var authFlow: [AuthMeUI.AuthmeFeature]
  public init(isMenuEnabled: Swift.Bool, authFlow: [AuthMeUI.AuthmeFeature])
}
public protocol AuthmeCoordinatorDelegate : AnyObject {
  func coordinatorDidFinishScan()
}
public protocol AuthmeCoordinatorDataSource : AnyObject {
  func flow(accessTokenFor feature: AuthMeUI.AuthmeFeature, completion: ((Swift.String) -> Swift.Void)?)
  func flow(featureConfigFor feature: AuthMeUI.AuthmeFeature) -> AuthMeUI.AuthmeFeatureConfig
}
final public class AuthmeCoordinator {
  @objc deinit
  weak final public var authDelegate: (any AuthMeUI.AuthMeAuthenticationDelegate)?
  weak final public var delegate: (any AuthMeUI.AuthmeCoordinatorDelegate)?
  weak final public var dataSource: (any AuthMeUI.AuthmeCoordinatorDataSource)?
  public init(presenter: UIKit.UIViewController, flowControl: AuthMeUI.FlowControl)
  final public func start(with transitionStyle: AuthMeUI.TransitionStyle, animated: Swift.Bool)
}
public enum NFCDeviceError : Swift.String, Swift.Error {
  case NotSupport
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct AuthMeUIConfig {
  public struct Customized {
    public struct ActionButton {
      public let backgroundColor: UIKit.UIColor
      public let contentColor: UIKit.UIColor
      public init(backgroundColor: UIKit.UIColor, contentColor: UIKit.UIColor)
    }
    public struct ActionHint {
      public let backgroundColor: UIKit.UIColor
      public let contentColor: UIKit.UIColor
      public init(backgroundColor: UIKit.UIColor, contentColor: UIKit.UIColor)
    }
    public struct CloseHint {
      public let backgroundColor: UIKit.UIColor
      public let contentColor: UIKit.UIColor
      public init(backgroundColor: UIKit.UIColor, contentColor: UIKit.UIColor)
    }
    public struct BackHint {
      public let contentColor: UIKit.UIColor
      public init(contentColor: UIKit.UIColor)
    }
    public struct Scanner {
      public let contentColor: UIKit.UIColor
      public init(contentColor: UIKit.UIColor)
    }
    public struct StepButton {
      public let backgroundColor: UIKit.UIColor
      public let contentColor: UIKit.UIColor
      public init(backgroundColor: UIKit.UIColor, contentColor: UIKit.UIColor)
    }
    public let actionButton: AuthMeUI.AuthMeUIConfig.Customized.ActionButton
    public let actionHint: AuthMeUI.AuthMeUIConfig.Customized.ActionHint
    public let closeHint: AuthMeUI.AuthMeUIConfig.Customized.CloseHint
    public let backHint: AuthMeUI.AuthMeUIConfig.Customized.BackHint
    public let scanner: AuthMeUI.AuthMeUIConfig.Customized.Scanner
    public let stepButton: AuthMeUI.AuthMeUIConfig.Customized.StepButton
    public let isConfirmImageShown: Swift.Bool
    public init(actionButton: AuthMeUI.AuthMeUIConfig.Customized.ActionButton, actionHint: AuthMeUI.AuthMeUIConfig.Customized.ActionHint, closeHint: AuthMeUI.AuthMeUIConfig.Customized.CloseHint, backHint: AuthMeUI.AuthMeUIConfig.Customized.BackHint, scanner: AuthMeUI.AuthMeUIConfig.Customized.Scanner, stepButton: AuthMeUI.AuthMeUIConfig.Customized.StepButton, isConfirmImageShown: Swift.Bool)
  }
  public var customized: AuthMeUI.AuthMeUIConfig.Customized
  public var showStatement: Swift.Bool
  public var isScreenRatioEnabled: Swift.Bool
  public init(customized: AuthMeUI.AuthMeUIConfig.Customized, showStatement: Swift.Bool)
}
@_hasMissingDesignatedInitializers final public class AuthMeLivenessUIParams {
  public static func setWith(block: (AuthMeUI.AuthMeLivenessUIParams) -> Swift.Void) -> AuthMeUI.AuthMeLivenessUIParams
  @objc deinit
}
extension AuthMeUI.AuthMeLivenessUIParams {
  @discardableResult
  final public func isColseButtonHidden(_ isHidden: Swift.Bool) -> Self
}
@_hasMissingDesignatedInitializers final public class AuthmeKYCConfig {
  public static func setWith(block: (AuthMeUI.AuthmeKYCConfig) -> Swift.Void) -> AuthMeUI.AuthmeKYCConfig
  @objc deinit
}
extension AuthMeUI.AuthmeKYCConfig {
  @discardableResult
  final public func isUploadFullFrameEnabaled(_ enabled: Swift.Bool) -> Self
}
extension AuthMeUI.AuthMeUICoordinator where T == OfflineMode {
  final public func start(with transitionStyle: AuthMeUI.TransitionStyle, animated: Swift.Bool)
}
extension AuthMeUI.AuthMeLocalize : Swift.Equatable {}
extension AuthMeUI.AuthMeLocalize : Swift.Hashable {}
extension AuthMeUI.AuthMeLocalize : Swift.RawRepresentable {}
extension AuthMeUI.AuthmeFeature : Swift.Equatable {}
extension AuthMeUI.AuthmeFeature : Swift.Hashable {}
extension AuthMeUI.AuthmeFeature : Swift.RawRepresentable {}
extension AuthMeUI.AuthMeLivenessViewController.`Type` : Swift.Equatable {}
extension AuthMeUI.AuthMeLivenessViewController.`Type` : Swift.Hashable {}
extension AuthMeUI.TransitionStyle : Swift.Equatable {}
extension AuthMeUI.TransitionStyle : Swift.Hashable {}
extension AuthMeUI.NFCDeviceError : Swift.Equatable {}
extension AuthMeUI.NFCDeviceError : Swift.Hashable {}
extension AuthMeUI.NFCDeviceError : Swift.RawRepresentable {}
